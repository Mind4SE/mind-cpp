template st.cpp.definitions.header.Component: st.cpp.common.ComponentHelper
  implements st.cpp.definitions.header.ComponentDefinitionHeader {

st.cpp.membrane.ControllerGenerator ctrlGenerator = plugin(st.cpp.membrane);
st.interfaces.IDLDefinition idl2c = st.interfaces.IDL2C ; 

$${

// -----------------------------------------------------------------------------
// Implementation of the ComponentDefinitionHeader interface
// -----------------------------------------------------------------------------

ComponentDefinitionHeader(definition) ::= <<
/* Generated file: <definition.name;format="nameToPath">.adl.hpp */
#ifndef __COMPONENT_<definition.name;format="toUpperCName">_ADL_HPP
#define __COMPONENT_<definition.name;format="toUpperCName">_ADL_HPP

#include "mindcommon.hpp"

<if (definition.interfaces)>
/* Start including the interface descriptions */
<definition.interfaces:{#include "<it.signature; format="nameToPath">.itf.hpp"}; separator="\n">
<UsedInterfaceDefinitions(definition=definition)>
/* End including the interface descriptions */

<endif>

<if (definition.astNodeTypes.("component"))>
/* Start including the sub-component descriptions */
<definition.components:{#include "<it.definitionReference.name;format="nameToPath">.adl.hpp"}; separator="\n">
/* End including the sub-component descriptions */

<endif>

/* Start definition of component type */
<DefinitionClassDef(definition=definition)>
/* End  definition of component type */

<if (!(definition.astNodeTypes.("component")))>
#include "<definition.name;format="nameToPath">.hpp"
<endif>

#endif /* __COMPONENT_<definition.name;format="toUpperCName">_ADL_HPP */

>>

// -----------------------------------------------------------------------------
// Internal templates
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// Component typedef

DefinitionClassDef(definition) ::= <<
class <definition.name;format="toCName">Definition <FullInheritanceDecl(definition=definition)> {
<if (definition.astNodeTypes.("component"))>
public:
  // sub-components
  <SubComponentsDecl(definition=definition)>

public:
  // bindings initialization between sub-components
  <ContructorDeclInitBindings(definition=definition)>

<else> <! constructor and destructor for primitives !>
public:
  // constructor and destructor
  inline <definition.name;format="toCName">Definition(){};
  inline ~<definition.name;format="toCName">Definition(){};

<endif>
<if (definition.astDecorations.("serverItfInstances"))>
public:
  // prototypes
  <definition.astDecorations.("serverItfInstances"):{<InterfaceMethodsVirtualPrototypes(itf=it)>}; separator="\n">

<endif>
<if (definition.astDecorations.("clientItfInstances"))>
public:
  <RequiredInterfacesDecl(definition=definition)>

<endif>
};
>>

//  -----------------------------------------------------------------------------
// Full inheritance

FullInheritanceDecl(definition) ::= <<
<if (definition.astDecorations.("serverItfInstances"))>
: <ProvidedInterfacesInheritance(definition=definition)>
<endif>
>>

// -----------------------------------------------------------------------------
// Provided interface instances classes definition

ProvidedInterfacesInheritance(definition) ::= <<
<definition.astDecorations.("serverItfInstances"):{<ProvidedInterfaceInheritance(itf=it)>}; separator=", ">
>>

ProvidedInterfaceInheritance(itf) ::= <<
public <it.signature; format="toCName">Descriptor
>>

InterfaceMethodsVirtualPrototypes(itf) ::= <<
<methodsVirtualPrototypes(itfDef=itf.astDecorations.("interfaceDefinition"))>
>>

methodsVirtualPrototypes(itfDef) ::= <<
<if (itfDef.methods)>
<itfDef.methods:{<(idl2c.methodDef)(method=it, methodName=it.name, withThisPtr="false")>;}; separator="\n">
<endif>
>>

// -----------------------------------------------------------------------------
// References generation

RequiredInterfacesDecl(definition) ::= <<
<definition.astDecorations.("clientItfInstances"):{<InterfaceReferencesDecl(itf=it)>}; separator="\n">
>>

InterfaceReferencesDecl(itf) ::= <<
<itf.signature; format="toCName">Reference <itf.name; format="toCName">;
>>

// -----------------------------------------------------------------------------
// Sub-components & internal bindings

SubComponentsDecl(definition) ::= <<
<if (definition.components)>
<definition.components:ComponentFieldDecl(component=it); separator="\n">
<endif>
>>

ComponentFieldDecl(component) ::= <<
<component.definitionReference.name; format="toCName"> _mind_<component.name; format="toCName">;
>>

ContructorDeclInitBindings(definition) ::= <<
<definition.name;format="toCName">Definition(){
  <if (definition.astNodeTypes.("binding"))>
    <if (definition.bindings)>
  <definition.bindings:{<DeclareBindingDefaultInit(binding=it)>}; separator="\n">
    <endif>
  <endif>
}

~<definition.name;format="toCName">Definition(){};
>>

DeclareBindingDefaultInit(binding) ::= <<
 _mind_<binding.fromComponent>.<binding.fromInterface>.reference=&_mind_<binding.toComponent>;
>>

// -----------------------------------------------------------------------------
// Used interface definitions

UsedInterfaceDefinitions(definition) ::= <<
<definition.astDecorations.("used-interface-definition").values:UsedInterfaceDefinition(usedItfName=it.interfaceName); separator="\n">
>>

UsedInterfaceDefinition(usedItfName) ::= <<
#include "<usedItfName; format="nameToPath">.itf.hpp"
>>

}$$ 
}