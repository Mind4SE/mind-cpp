<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"./dtd/docbookx.dtd" [
<!ENTITY % myents SYSTEM "./shared.ent">
%myents;
]>
<book status="draft" version="0.1" xmlns="http://docbook.org/ns/docbook">
  <bookinfo>
    <title>ZigBee sensor, a MIND C++ Example</title>
  </bookinfo>

  <chapter>
    <title>Document history</title>

    <table frame="all">
      <title>Document history</title>

      <tgroup align="left" cols="4" colsep="0.2" rowsep="1">
        <thead>
          <row>
            <entry>Version</entry>

            <entry>Date</entry>

            <entry>Author</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>0.1</entry>

            <entry>21/02/2014</entry>

            <entry>Yves Teissier</entry>

            <entry>Document creation</entry>
          </row>

          <row>
            <entry>0.2</entry>

            <entry>09/04/2014</entry>

            <entry>Yves Teissier</entry>

            <entry>Add class diagrams</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </chapter>

  <chapter>
    <title>Introduction</title>

    <section>
      <para>This example is dedicated to illustrate the usage of
      mindc++.</para>
    </section>
  </chapter>

  <chapter>
    <title>Overview</title>

    <section>
      <para>This overview shows the global example architecture. An UML
      component diagram (internal block diagram) has naturally be used in
      order to have a "component" representation.</para>

      <para>Primitive and composite components are represented by red blocks.
      Provides interfaces are represented by lollipops connectors. Required
      interface are represented by sockets connectors.</para>

      <para>The small square at the connector base represents the port. A port
      can be an implementation language like "ANSI C", "C++" , a protocol like
      "DPWS", "modbus" or a physical link like RS485, USB.</para>

      <para>The anonymous component is an in-lined component in the
      zigBeeStack composite. This anonymous component aims to implement the
      zigBeeStack composite interface.</para>

      <para>Connections between the composite "external interfaces" and
      "internal interfaces" are performed by the delegation connection.</para>

      <para>
        <note>This overview as been realized by Artisan Studio (Atego).</note>

        <note>The stereotype "anonymous" has been created.</note>
      </para>
    </section>

    <section id="examplecpp01-01">
      <formalpara>
        <example>
          <title>Component view</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="images/ZigBeeSensor_Comp.png"
                         format="PNG" scale="30"/>
            </imageobject>
          </mediaobject>
        </example>
      </formalpara>
    </section>

    <para>The following diagram (block definition diagram) aims to represents
    the structural view (composition, inheritance).</para>

    <section id="examplecpp01-02">
      <formalpara>
        <example>
          <title>Structural view</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center"
                         fileref="images/ZigBeeSensor_CompStr.png"
                         format="PNG" scale="30"/>
            </imageobject>
          </mediaobject>
        </example>
      </formalpara>
    </section>
  </chapter>

  <chapter>
    <title>MIND C++ model</title>

    <section id="examplecpp01-03">
      <title>
        <classname>C++ Model</classname>
      </title>

      <para>The MIND C++ model generates code following the MIND C++ model.
      This model allows the user to "code" components has hpp file (for the
      definition) and c++ file (for the implementation).</para>

      <para>The user defines interfaces in the "itf" files</para>

      <para>The user defines provides and required interfaces and connections
      between component in adl files.</para>

      <para>The mindc++ compiler will generated all necessary c++ classes in
      order to support the following MIND features (cf. 2).</para>

      <para/>

      <para>In order to illustrate the MIND C++ model the c++ representation
      of the "temperatureCluster" component has been selected.</para>

      <para>This diagram shows all classes (generated and user class) related
      to the "temperatureCluster" component.</para>

      <para>The relation of inheritance between the generated and user classes
      are shown.</para>

      <note>In grey the runtime classes.</note>

      <note>In yellow the generated classes.</note>

      <note>In green the user classes.</note>

      <para/>

      <section id="examplecpp01-04">
        <formalpara>
          <example>
            <title>Class diagram related to the "temperatureCluster"
            component.</title>

            <mediaobject>
              <imageobject>
                <imagedata align="center"
                           fileref="images/temperatureCluster_dia.png"
                           format="PNG" scale="20"/>
              </imageobject>
            </mediaobject>
          </example>
        </formalpara>
      </section>
    </section>

    <section id="examplecpp01-05">
      <title>
        <classname>MIND features</classname>
      </title>

      <para>The generated code follows the MIND C++ model.</para>

      <para>This C++ model implements the following features:</para>

      <para>
        <table frame="all">
          <title>Illustrated features</title>

          <tgroup align="left" cols="2" colsep="0.2" rowsep="1">
            <thead>
              <row>
                <entry>Feature</entry>

                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>Type</entry>

                <entry>The <code>temperatureSensor</code> primitive extend the
                <code>sensor</code> type. Currently the model does not
                maintains the hierarchy; the parent component is merged with
                the child component.</entry>
              </row>

              <row>
                <entry>Composition</entry>

                <entry>The <code>zigBeeStack</code> component is a composite.
                This composite requires a led driver and a Flash driver and
                provides the ZigBee stack API.</entry>
              </row>

              <row>
                <entry>Anonymous</entry>

                <entry>The <code>zigBeeStackAPI</code> component is anonymous.
                The role of this in-lined component is to compose the ZigBee
                stack API.</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </para>
    </section>

    <section id="UserCode">
      <title>
        <classname>User code</classname>
      </title>

      <para>The MIND C++ model allow the user to code his own CPP and HPP
      files.</para>

      <para>The CPP file contains interface methods implementations and the
      HPP file contains the component definition (with private data and
      private methods).</para>

      <para>The both next examples illustrate the CPP part of the
      "temperatureCluster" component.</para>

      <formalpara>
        <example>
          <title>HPP file example</title>

          <programlisting>
				<xi:include href="../main/mind/temperatureCluster.hpp" parse="text"
              xmlns:xi="http://www.w3.org/2001/XInclude"/>
			</programlisting>
        </example>
      </formalpara>

      <formalpara>
        <example>
          <title>CPP file example</title>

          <programlisting>
				<xi:include href="../main/mind/temperatureCluster.cpp" parse="text"
              xmlns:xi="http://www.w3.org/2001/XInclude"/>
			</programlisting>
        </example>
      </formalpara>
    </section>

    <section>
      <title>
        <classname>Generated code with MIND C++ model</classname>
      </title>

      <para>mindc++ generates some classes following the MIND C++
      Model.</para>

      <para>Some source files (hpp and cpp in the target folder) are created
      and the C++ compiler is invoked in order to compile C++ sources.</para>

      <para>All generated code is available without compilation in the
      "GeneratedCode" folder.</para>

      <para>The corresponding class diagram is the following.</para>

      <note>
        <para>This diagram does not show association between classes (bindings
        between components).</para>
      </note>

      <note>
        <para>In grey the runtime classes.</para>

        <para>In yellow the generated classes.</para>

        <para>In green the user classes.</para>
      </note>

      <section id="examplecpp01-06">
        <formalpara>
          <example>
            <title>Component view</title>

            <mediaobject>
              <imageobject>
                <imagedata align="center"
                           fileref="images/ZigBeeSensor_CPP_nmf_class.png"
                           format="PNG" scale="20"/>
              </imageobject>
            </mediaobject>
          </example>
        </formalpara>
      </section>

      <para>The composite representation has been flattened. Currently the
      model does not support the composition of sub-composites components. The
      following code corresponds to the main composite definition.</para>

      <formalpara>
        <example>
          <title>The main composite definition generated code</title>

          <programlisting>
				<xi:include href="../../GeneratedCode/zigBeeSensor.adl.hpp" parse="text"
              xmlns:xi="http://www.w3.org/2001/XInclude"/>
			</programlisting>
        </example>
      </formalpara>

      <para>The association between classes is illustrated by the following
      diagram.</para>

      <section id="examplecpp01-07">
        <formalpara>
          <example>
            <title>Component associations</title>

            <mediaobject>
              <imageobject>
                <imagedata align="center"
                           fileref="images/ZigBeeSensor_CPP_nmf_associations.png"
                           format="PNG" scale="20"/>
              </imageobject>
            </mediaobject>
          </example>
        </formalpara>
      </section>
    </section>

    <section/>

    <section>
      <title>
        <classname>Generated code with simplified model</classname>
      </title>

      <para>The simplified model does not support some features as for example
      to disambiguate method with the same name from two different
      interfaces.</para>

      <para>This representation aims to be closer to the "intuitive" C++
      representation.</para>

      <para>The corresponding class diagram with a simplified C++ model is the
      following.</para>

      <section id="examplecpp01-08">
        <formalpara>
          <example>
            <title>Component view</title>

            <mediaobject>
              <imageobject>
                <imagedata align="center"
                           fileref="images/ZigBeeSensor_CPP_pure_class.png"
                           format="PNG" scale="20"/>
              </imageobject>
            </mediaobject>
          </example>
        </formalpara>
      </section>
    </section>
  </chapter>

  <chapter>
    <title>Running the example</title>

    <para>In order to build this example please set the appropriate
    environment variable to the mindc++ compiler.</para>

    <para>The root folder contains a Makefile. Please invoke "make" in order
    to build the example.</para>

    <para>The build result is available in the
    <code>target/Default/binary</code> folder.</para>

    <para>This build folder contains generated files, object files and the
    final binary</para>

    <note>
      <para>The Makefile invoke the mindc compiler with the following options:
      <code>--cpp --flatten</code></para>

      <para>
        <code>These options are defined in the "Default.properties"
        file.</code>
      </para>
    </note>
  </chapter>

  <chapter>
    <title>Execution result</title>

    <para>The execution of the example must provides the following
    output:</para>

    <example>
      <title>Expected result</title>

      <programlisting>
					Initialise ZigBee stack
					Switch ON sensor
					Current temperature is 2730
					Switch OFF sensor
					Led 01 ON
					Send data to the ZigBee network : h0 h0 h21 haa ha
					Write bytes ...
					Led 01 OFF
		</programlisting>
    </example>
  </chapter>
</book>
